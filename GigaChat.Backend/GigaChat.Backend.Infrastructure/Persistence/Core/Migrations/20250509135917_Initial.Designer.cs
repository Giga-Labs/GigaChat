// <auto-generated />
using System;
using GigaChat.Backend.Infrastructure.Persistence.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GigaChat.Backend.Infrastructure.Persistence.Core.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20250509135917_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.BlockedUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("BlockedUserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("BlockedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BlockedUserId");

                    b.HasIndex("BlockedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("BlockedUsers", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.ClearedConversation", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("ClearedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ClearedConversations", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("IsGroup");

                    b.ToTable("Conversations", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.ConversationInviteLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InviteeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("InviterId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("InviteeId");

                    b.HasIndex("InviterId");

                    b.ToTable("ConversationInviteLogs", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.ConversationMember", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("InvitedById")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ConversationId", "UserId");

                    b.HasIndex("IsAdmin");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationMembers", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.DeletedMessage", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DeletedMessages", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.FileUploadMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsVoice")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UploadedById")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("UploadedById");

                    b.ToTable("FileUploadMetadata", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVoice")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PayloadUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.HasIndex("Type");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.MessageEditHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditedById")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OldContent")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EditedById");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageEditHistories", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.MessageReaction", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime>("ReactedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReactions", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.MessageReceipt", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SeenAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId", "UserId");

                    b.HasIndex("DeliveredAt");

                    b.HasIndex("SeenAt");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReceipts", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.PinnedMessage", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PinnedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PinnedById")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("MessageId");

                    b.HasIndex("PinnedById");

                    b.ToTable("PinnedMessages", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.ReportedInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InviteeId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("InviterId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Reason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InviteeId");

                    b.HasIndex("InviterId");

                    b.HasIndex("InviterId", "InviteeId")
                        .IsUnique();

                    b.ToTable("ReportedInvites", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.UserSettings", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("AllowGroupInvites")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.UserSpamScore", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsMarkedAsSpammer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ReportsReceived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("UserId");

                    b.HasIndex("IsMarkedAsSpammer");

                    b.ToTable("UserSpamScores", (string)null);
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.ConversationInviteLog", b =>
                {
                    b.HasOne("GigaChat.Backend.Domain.Entities.Core.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.ConversationMember", b =>
                {
                    b.HasOne("GigaChat.Backend.Domain.Entities.Core.Conversation", "Conversation")
                        .WithMany("Members")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.Message", b =>
                {
                    b.HasOne("GigaChat.Backend.Domain.Entities.Core.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.MessageEditHistory", b =>
                {
                    b.HasOne("GigaChat.Backend.Domain.Entities.Core.Message", "Message")
                        .WithMany("EditHistory")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.MessageReaction", b =>
                {
                    b.HasOne("GigaChat.Backend.Domain.Entities.Core.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.MessageReceipt", b =>
                {
                    b.HasOne("GigaChat.Backend.Domain.Entities.Core.Message", "Message")
                        .WithMany("Receipts")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.PinnedMessage", b =>
                {
                    b.HasOne("GigaChat.Backend.Domain.Entities.Core.Message", "Message")
                        .WithOne()
                        .HasForeignKey("GigaChat.Backend.Domain.Entities.Core.PinnedMessage", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.Conversation", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("GigaChat.Backend.Domain.Entities.Core.Message", b =>
                {
                    b.Navigation("EditHistory");

                    b.Navigation("Reactions");

                    b.Navigation("Receipts");
                });
#pragma warning restore 612, 618
        }
    }
}
